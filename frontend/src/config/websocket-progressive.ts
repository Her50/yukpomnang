// Configuration progressive des WebSockets
// Ce fichier permet de r√©activer les WebSockets √©tape par √©tape

export const WEBSOCKET_PROGRESSIVE_CONFIG = {
  // Phase 1: Diagnostic et nettoyage (ACTUELLE)
  phase1: {
    enabled: false,
    description: "WebSockets d√©sactiv√©s pour diagnostic",
    components: {
      status: false,        // Statut en ligne des prestataires
      notifications: false, // Notifications push
      chat: false,          // Chat en temps r√©el
      access: false         // Acc√®s en temps r√©el
    }
  },
  
  // Phase 2: R√©activation progressive
  phase2: {
    enabled: true,
    description: "R√©activation progressive des WebSockets",
    components: {
      status: true,         // Commencer par le statut (le plus simple)
      notifications: true,  // Activer les notifications
      chat: true,           // Activer le chat
      access: true          // Activer l'acc√®s
    }
  },
  
  // Phase 3: Fonctionnalit√©s avanc√©es
  phase3: {
    enabled: true,
    description: "Toutes les fonctionnalit√©s WebSocket activ√©es",
    components: {
      status: true,
      notifications: true,
      chat: true,
      access: true
    }
  }
};

// Configuration actuelle (modifier cette ligne pour changer de phase)
export const CURRENT_PHASE: 'phase1' | 'phase2' | 'phase3' = 'phase3';

// Fonction utilitaire pour obtenir la configuration actuelle
export const getCurrentWebSocketConfig = () => {
  return WEBSOCKET_PROGRESSIVE_CONFIG[CURRENT_PHASE as keyof typeof WEBSOCKET_PROGRESSIVE_CONFIG];
};

// Fonction utilitaire pour v√©rifier si un composant est activ√©
export const isWebSocketComponentEnabled = (component: 'status' | 'notifications' | 'chat' | 'access') => {
  const config = getCurrentWebSocketConfig();
  return config.enabled && config.components[component];
};

// Messages d'information pour chaque phase
export const PHASE_MESSAGES = {
  phase1: {
    title: "üîå WebSockets en diagnostic",
    description: "Les WebSockets sont temporairement d√©sactiv√©s pour r√©soudre les erreurs",
    actions: [
      "Diagnostic des composants",
      "Nettoyage du code",
      "Pr√©paration de la r√©activation"
    ]
  },
  phase2: {
    title: "üîÑ WebSockets en r√©activation",
    description: "R√©activation progressive des fonctionnalit√©s WebSocket",
    actions: [
      "Statut en ligne activ√©",
      "Tests de stabilit√©",
      "Pr√©paration des notifications"
    ]
  },
  phase3: {
    title: "‚úÖ WebSockets op√©rationnels",
    description: "Toutes les fonctionnalit√©s WebSocket sont actives",
    actions: [
      "Chat en temps r√©el",
      "Notifications push",
      "Statut en ligne",
      "Acc√®s en temps r√©el"
    ]
  }
};

// Instructions pour passer √† la phase suivante
export const getNextPhaseInstructions = () => {
  const currentPhase = CURRENT_PHASE as 'phase1' | 'phase2' | 'phase3';
  switch (currentPhase) {
    case 'phase1':
      return {
        nextPhase: 'phase2',
        instructions: [
          "1. V√©rifier que le backend WebSocket fonctionne",
          "2. Tester le composant de statut en ligne",
          "3. Modifier CURRENT_PHASE = 'phase2'",
          "4. Red√©marrer l'application"
        ]
      };
    case 'phase2':
      return {
        nextPhase: 'phase3',
        instructions: [
          "1. V√©rifier la stabilit√© du statut en ligne",
          "2. Tester les notifications",
          "3. Modifier CURRENT_PHASE = 'phase3'",
          "4. Red√©marrer l'application"
        ]
      };
    case 'phase3':
      return {
        nextPhase: 'complete',
        instructions: [
          "üéâ Toutes les fonctionnalit√©s WebSocket sont op√©rationnelles !",
          "Surveiller les performances et la stabilit√©"
        ]
      };
    default:
      return {
        nextPhase: 'phase1',
        instructions: [
          "Revenir √† la phase 1 pour le diagnostic"
        ]
      };
  }
}; 