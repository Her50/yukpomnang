#!/usr/bin/env python3
"""
Examiner le contenu exact du service 138
"""

import os
import psycopg2
from psycopg2.extras import RealDictCursor
from dotenv import load_dotenv
import json

# Charger les variables d'environnement
load_dotenv()

def get_db_connection():
    """√âtablir une connexion √† la base de donn√©es"""
    try:
        database_url = os.getenv('DATABASE_URL')
        if database_url:
            conn = psycopg2.connect(database_url)
            print("‚úÖ Connexion PostgreSQL √©tablie")
            return conn
        else:
            print("‚ùå DATABASE_URL non d√©finie")
            return None
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return None

def examiner_service_138():
    """Examiner le contenu exact du service 138"""
    print("üîç EXAMEN D√âTAILL√â DU SERVICE 138")
    print("=" * 50)
    
    conn = get_db_connection()
    if not conn:
        return
    
    try:
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        # R√©cup√©rer le service 138
        cursor.execute("""
            SELECT id, data, created_at, embedding_status, embedding_error
            FROM services 
            WHERE id = 138
        """)
        
        service = cursor.fetchone()
        if not service:
            print("‚ùå Service 138 non trouv√© en base")
            return
        
        print(f"‚úÖ Service 138 trouv√©:")
        print(f"   - ID: {service['id']}")
        print(f"   - Cr√©√©: {service['created_at']}")
        print(f"   - Statut embedding: {service['embedding_status']}")
        print(f"   - Erreur embedding: {service['embedding_error']}")
        
        # Analyser les donn√©es JSON
        data = service['data']
        print(f"\nüìã CONTENU DU SERVICE 138:")
        print(json.dumps(data, indent=2, ensure_ascii=False))
        
        # Extraire les champs cl√©s
        if isinstance(data, dict):
            print(f"\nüîç CHAMPS CL√âS EXTRAITS:")
            
            # Titre du service
            titre = data.get('titre_service', {})
            if isinstance(titre, dict):
                titre_valeur = titre.get('valeur', 'N/A')
                print(f"   - Titre: {titre_valeur}")
            else:
                print(f"   - Titre: {titre}")
            
            # Description
            description = data.get('description', {})
            if isinstance(description, dict):
                desc_valeur = description.get('valeur', 'N/A')
                print(f"   - Description: {desc_valeur}")
            else:
                print(f"   - Description: {description}")
            
            # Cat√©gorie
            category = data.get('category', {})
            if isinstance(category, dict):
                cat_valeur = category.get('valeur', 'N/A')
                print(f"   - Cat√©gorie: {cat_valeur}")
            else:
                print(f"   - Cat√©gorie: {category}")
            
            # Autres champs
            for key, value in data.items():
                if key not in ['titre_service', 'description', 'category', 'intention']:
                    if isinstance(value, dict) and 'valeur' in value:
                        print(f"   - {key}: {value['valeur']}")
                    else:
                        print(f"   - {key}: {value}")
        
        cursor.close()
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'examen: {e}")
    finally:
        conn.close()
        print(f"\n‚úÖ Connexion ferm√©e")

if __name__ == "__main__":
    examiner_service_138() 