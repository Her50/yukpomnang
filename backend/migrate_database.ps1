# Script de migration de la base de donn√©es PostgreSQL
Write-Host "üóÑÔ∏è Migration de la base de donn√©es PostgreSQL..." -ForegroundColor Green
Write-Host "=========================================" -ForegroundColor Cyan

# Configuration de la connexion
$env:DATABASE_URL = "postgres://postgres:Hernandez87@localhost/yukpo_db"

# 1. V√©rifier la connexion PostgreSQL
Write-Host "1Ô∏è‚É£ V√©rification de la connexion PostgreSQL..." -ForegroundColor Yellow
try {
    $testResult = psql $env:DATABASE_URL -c "SELECT version();" 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "   ‚úÖ Connexion PostgreSQL OK" -ForegroundColor Green
        Write-Host "   üìä $testResult" -ForegroundColor Cyan
    } else {
        Write-Host "   ‚ùå Erreur de connexion: $testResult" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "   ‚ùå Erreur de connexion: $_" -ForegroundColor Red
    exit 1
}

# 2. V√©rifier l'existence de la table services
Write-Host "2Ô∏è‚É£ V√©rification de la table services..." -ForegroundColor Yellow
try {
    $tableCheck = psql $env:DATABASE_URL -c "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'services');" 2>&1
    if ($LASTEXITCODE -eq 0) {
        if ($tableCheck -match "t") {
            Write-Host "   ‚úÖ Table services existe" -ForegroundColor Green
        } else {
            Write-Host "   ‚ùå Table services n'existe pas" -ForegroundColor Red
            exit 1
        }
    } else {
        Write-Host "   ‚ùå Erreur lors de la v√©rification: $tableCheck" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "   ‚ùå Erreur lors de la v√©rification: $_" -ForegroundColor Red
    exit 1
}

# 3. V√©rifier les colonnes existantes
Write-Host "3Ô∏è‚É£ V√©rification des colonnes existantes..." -ForegroundColor Yellow
try {
    $columnsCheck = psql $env:DATABASE_URL -c "SELECT column_name FROM information_schema.columns WHERE table_name = 'services' AND column_name IN ('interaction_count', 'rating_avg', 'rating_count');" 2>&1
    Write-Host "   üìä Colonnes existantes: $columnsCheck" -ForegroundColor Cyan
} catch {
    Write-Host "   ‚ö†Ô∏è Erreur lors de la v√©rification des colonnes: $_" -ForegroundColor Yellow
}

# 4. Appliquer les migrations
Write-Host "4Ô∏è‚É£ Application des migrations..." -ForegroundColor Yellow

# Migration 1: Ajouter interaction_count
Write-Host "   üìù Ajout de interaction_count..." -ForegroundColor Cyan
try {
    $result1 = psql $env:DATABASE_URL -c "ALTER TABLE services ADD COLUMN IF NOT EXISTS interaction_count INTEGER DEFAULT 0;" 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "   ‚úÖ interaction_count ajout√©" -ForegroundColor Green
    } else {
        Write-Host "   ‚ö†Ô∏è Erreur interaction_count: $result1" -ForegroundColor Yellow
    }
} catch {
    Write-Host "   ‚ö†Ô∏è Erreur interaction_count: $_" -ForegroundColor Yellow
}

# Migration 2: Ajouter rating_avg
Write-Host "   üìù Ajout de rating_avg..." -ForegroundColor Cyan
try {
    $result2 = psql $env:DATABASE_URL -c "ALTER TABLE services ADD COLUMN IF NOT EXISTS rating_avg DECIMAL(3,2) DEFAULT 0.0;" 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "   ‚úÖ rating_avg ajout√©" -ForegroundColor Green
    } else {
        Write-Host "   ‚ö†Ô∏è Erreur rating_avg: $result2" -ForegroundColor Yellow
    }
} catch {
    Write-Host "   ‚ö†Ô∏è Erreur rating_avg: $_" -ForegroundColor Yellow
}

# Migration 3: Ajouter rating_count
Write-Host "   üìù Ajout de rating_count..." -ForegroundColor Cyan
try {
    $result3 = psql $env:DATABASE_URL -c "ALTER TABLE services ADD COLUMN IF NOT EXISTS rating_count INTEGER DEFAULT 0;" 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "   ‚úÖ rating_count ajout√©" -ForegroundColor Green
    } else {
        Write-Host "   ‚ö†Ô∏è Erreur rating_count: $result3" -ForegroundColor Yellow
    }
} catch {
    Write-Host "   ‚ö†Ô∏è Erreur rating_count: $_" -ForegroundColor Yellow
}

# 5. Cr√©er les index
Write-Host "5Ô∏è‚É£ Cr√©ation des index..." -ForegroundColor Yellow

# Index pour interaction_count
Write-Host "   üìù Index interaction_count..." -ForegroundColor Cyan
try {
    $index1 = psql $env:DATABASE_URL -c "CREATE INDEX IF NOT EXISTS idx_services_interaction_count ON services(interaction_count);" 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "   ‚úÖ Index interaction_count cr√©√©" -ForegroundColor Green
    } else {
        Write-Host "   ‚ö†Ô∏è Erreur index interaction_count: $index1" -ForegroundColor Yellow
    }
} catch {
    Write-Host "   ‚ö†Ô∏è Erreur index interaction_count: $_" -ForegroundColor Yellow
}

# Index pour rating_avg
Write-Host "   üìù Index rating_avg..." -ForegroundColor Cyan
try {
    $index2 = psql $env:DATABASE_URL -c "CREATE INDEX IF NOT EXISTS idx_services_rating_avg ON services(rating_avg);" 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "   ‚úÖ Index rating_avg cr√©√©" -ForegroundColor Green
    } else {
        Write-Host "   ‚ö†Ô∏è Erreur index rating_avg: $index2" -ForegroundColor Yellow
    }
} catch {
    Write-Host "   ‚ö†Ô∏è Erreur index rating_avg: $_" -ForegroundColor Yellow
}

# Index pour rating_count
Write-Host "   üìù Index rating_count..." -ForegroundColor Cyan
try {
    $index3 = psql $env:DATABASE_URL -c "CREATE INDEX IF NOT EXISTS idx_services_rating_count ON services(rating_count);" 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "   ‚úÖ Index rating_count cr√©√©" -ForegroundColor Green
    } else {
        Write-Host "   ‚ö†Ô∏è Erreur index rating_count: $index3" -ForegroundColor Yellow
    }
} catch {
    Write-Host "   ‚ö†Ô∏è Erreur index rating_count: $_" -ForegroundColor Yellow
}

# 6. V√©rification finale
Write-Host "6Ô∏è‚É£ V√©rification finale..." -ForegroundColor Yellow
try {
    $finalCheck = psql $env:DATABASE_URL -c "SELECT column_name, data_type, is_nullable, column_default FROM information_schema.columns WHERE table_name = 'services' AND column_name IN ('interaction_count', 'rating_avg', 'rating_count') ORDER BY column_name;" 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "   ‚úÖ V√©rification finale r√©ussie" -ForegroundColor Green
        Write-Host "   üìä Colonnes ajout√©es:" -ForegroundColor Cyan
        Write-Host "$finalCheck" -ForegroundColor White
    } else {
        Write-Host "   ‚ùå Erreur lors de la v√©rification finale: $finalCheck" -ForegroundColor Red
    }
} catch {
    Write-Host "   ‚ùå Erreur lors de la v√©rification finale: $_" -ForegroundColor Red
}

# 7. Test de donn√©es
Write-Host "7Ô∏è‚É£ Test de donn√©es..." -ForegroundColor Yellow
try {
    $dataTest = psql $env:DATABASE_URL -c "SELECT COUNT(*) as total_services, AVG(interaction_count) as avg_interaction, AVG(rating_avg) as avg_rating FROM services;" 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "   ‚úÖ Test de donn√©es r√©ussi" -ForegroundColor Green
        Write-Host "   üìä Statistiques: $dataTest" -ForegroundColor Cyan
    } else {
        Write-Host "   ‚ö†Ô∏è Erreur lors du test de donn√©es: $dataTest" -ForegroundColor Yellow
    }
} catch {
    Write-Host "   ‚ö†Ô∏è Erreur lors du test de donn√©es: $_" -ForegroundColor Yellow
}

Write-Host "‚úÖ Migration de la base de donn√©es termin√©e!" -ForegroundColor Green 