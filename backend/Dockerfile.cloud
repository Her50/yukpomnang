# üöÄ Dockerfile optimis√© pour l'architecture cloud massive
FROM rust:1.75-slim as builder

# Installer les d√©pendances syst√®me
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libpq-dev \
    libmariadb-dev \
    libsqlite3-dev \
    libclang-dev \
    clang \
    make \
    cmake \
    && rm -rf /var/lib/apt/lists/*

# Copier les fichiers de configuration
COPY Cargo.toml Cargo.lock ./
COPY src ./src
COPY config ./config
COPY migrations ./migrations

# Construire avec optimisations pour la production
RUN cargo build --release --features gpu

# üê≥ Image finale optimis√©e
FROM debian:bookworm-slim

# Installer les d√©pendances runtime
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libpq5 \
    libssl3 \
    libmariadb3 \
    libsqlite3-0 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Cr√©er l'utilisateur non-root
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Cr√©er les r√©pertoires n√©cessaires
RUN mkdir -p /app/config /app/logs /app/data

# Copier l'ex√©cutable
COPY --from=builder /target/release/yukpomnang_backend /app/

# Copier les fichiers de configuration
COPY --from=builder /app/config /app/config
COPY --from=builder /app/migrations /app/migrations

# Copier les scripts de d√©marrage
COPY scripts/start-cloud.sh /app/
RUN chmod +x /app/start-cloud.sh

# D√©finir les permissions
RUN chown -R appuser:appuser /app

# Variables d'environnement
ENV RUST_LOG=info
ENV RUST_BACKTRACE=1
ENV APP_ENV=production

# Ports expos√©s
EXPOSE 8080 9090

# R√©pertoire de travail
WORKDIR /app

# Utilisateur non-root
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Point d'entr√©e
ENTRYPOINT ["/app/start-cloud.sh"] 