# Script pour appliquer la migration des champs m√©dia aux services
# Date: 2025-08-30

Write-Host "üéØ Application de la migration des champs m√©dia aux services..." -ForegroundColor Green

# Configuration de la base de donn√©es
$DATABASE_URL = "postgres://postgres:Hernandez87@localhost/yukpo_db"
$MIGRATION_FILE = "migrations/20250830_add_media_fields_to_services.sql"

# V√©rifier que le fichier de migration existe
if (-not (Test-Path $MIGRATION_FILE)) {
    Write-Host "‚ùå Fichier de migration non trouv√©: $MIGRATION_FILE" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Fichier de migration trouv√©: $MIGRATION_FILE" -ForegroundColor Green

# Lire le contenu du fichier SQL
$sqlContent = Get-Content $MIGRATION_FILE -Raw

if (-not $sqlContent) {
    Write-Host "‚ùå Le fichier de migration est vide" -ForegroundColor Red
    exit 1
}

Write-Host "üìñ Contenu du fichier de migration lu avec succ√®s" -ForegroundColor Green

# Diviser le contenu SQL en commandes individuelles
$commands = $sqlContent -split ";" | Where-Object { $_.Trim() -ne "" }

Write-Host "üîß Ex√©cution de $($commands.Count) commandes SQL..." -ForegroundColor Yellow

# Ex√©cuter chaque commande SQL
$successCount = 0
$errorCount = 0

foreach ($command in $commands) {
    $command = $command.Trim()
    if ($command -eq "") { continue }
    
    try {
        Write-Host "  ‚Üí Ex√©cution: $($command.Substring(0, [Math]::Min(50, $command.Length)))..." -ForegroundColor Cyan
        
        # Ex√©cuter la commande SQL
        $result = psql $DATABASE_URL -c $command 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "    ‚úÖ Succ√®s" -ForegroundColor Green
            $successCount++
        } else {
            Write-Host "    ‚ùå Erreur: $result" -ForegroundColor Red
            $errorCount++
        }
    }
    catch {
        Write-Host "    ‚ùå Exception: $($_.Exception.Message)" -ForegroundColor Red
        $errorCount++
    }
}

# R√©sum√©
Write-Host "`nüìä R√©sum√© de la migration:" -ForegroundColor Magenta
Write-Host "  ‚úÖ Commandes r√©ussies: $successCount" -ForegroundColor Green
Write-Host "  ‚ùå Commandes √©chou√©es: $errorCount" -ForegroundColor Red

if ($errorCount -eq 0) {
    Write-Host "`nüéâ Migration appliqu√©e avec succ√®s !" -ForegroundColor Green
    Write-Host "   Les champs m√©dia ont √©t√© ajout√©s aux services." -ForegroundColor Green
} else {
    Write-Host "`n‚ö†Ô∏è  Migration partiellement r√©ussie avec $errorCount erreur(s)" -ForegroundColor Yellow
    Write-Host "   V√©rifiez les erreurs ci-dessus." -ForegroundColor Yellow
}

Write-Host "`nüîç V√©rification de la structure de la table services..." -ForegroundColor Blue

# V√©rifier que les colonnes ont √©t√© ajout√©es
try {
    $checkResult = psql $DATABASE_URL -c "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'services' AND column_name IN ('logo', 'banniere', 'images_realisations', 'videos') ORDER BY column_name;"
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Structure de la table services v√©rifi√©e:" -ForegroundColor Green
        Write-Host $checkResult -ForegroundColor White
    } else {
        Write-Host "‚ö†Ô∏è  Impossible de v√©rifier la structure de la table" -ForegroundColor Yellow
    }
}
catch {
    Write-Host "‚ö†Ô∏è  Erreur lors de la v√©rification: $($_.Exception.Message)" -ForegroundColor Yellow
}

Write-Host "`nüèÅ Migration termin√©e !" -ForegroundColor Green 