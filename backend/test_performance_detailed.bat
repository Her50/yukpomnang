@echo off
echo üß™ Test de performance d√©taill√© avec logs de temps
echo ================================================
echo.

echo üìã V√©rification des pr√©requis...
echo.

REM V√©rifier si Python est install√©
python --version >nul 2>&1
if errorlevel 1 (
    echo ‚ùå Python n'est pas install√© ou pas dans le PATH
    echo    Installez Python depuis https://python.org
    pause
    exit /b 1
)

REM V√©rifier si requests est install√©
python -c "import requests" >nul 2>&1
if errorlevel 1 (
    echo ‚ö†Ô∏è  Module requests non install√©, installation...
    pip install requests
    if errorlevel 1 (
        echo ‚ùå Erreur lors de l'installation de requests
        pause
        exit /b 1
    )
)

echo ‚úÖ Pr√©requis v√©rifi√©s
echo.

echo üöÄ Lancement du test de performance d√©taill√©...
echo.

echo üí° Ce test va :
echo    - Mesurer chaque √©tape de l'orchestration IA
echo    - Identifier les goulots d'√©tranglement
echo    - Analyser les temps d'ex√©cution IA externe
echo    - Fournir des recommandations d'optimisation
echo.

echo ‚ö†Ô∏è  IMPORTANT : Assurez-vous que :
echo    - Le backend Rust est d√©marr√© avec les logs d√©taill√©s
echo    - Le microservice embedding est actif
echo    - MongoDB est accessible
echo    - Vous avez un token utilisateur valide
echo.

REM Lancer le test
python test_performance_detailed.py

echo.
echo üìä Test termin√© !
echo.
echo üí° Pour analyser les r√©sultats :
echo    1. V√©rifiez les logs du backend Rust
echo    2. Cherchez les sections [TIMING]
echo    3. Identifiez les √©tapes les plus lentes
echo    4. Optimisez en priorit√© les goulots d'√©tranglement
echo.
pause 