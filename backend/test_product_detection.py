#!/usr/bin/env python3
"""
Test de d√©tection de produits pour Yukpo
Teste diff√©rents sc√©narios de d√©tection de produits multiples
"""

import requests
import json
import time
from datetime import datetime, timedelta
import jwt

# Configuration
BACKEND_URL = "http://localhost:3001"
JWT_SECRET = "dev_secret"

def generate_jwt_token():
    """G√©n√®re un token JWT valide pour les tests"""
    payload = {
        "sub": "test_user",
        "exp": int((datetime.utcnow() + timedelta(hours=1)).timestamp()),
        "iat": int(datetime.utcnow().timestamp()),
        "user_id": "test_user_id",
        "email": "test@example.com",
        "role": "user"
    }
    return jwt.encode(payload, JWT_SECRET, algorithm="HS256")

def test_product_detection():
    """Teste la d√©tection de produits avec diff√©rents cas"""
    
    token = generate_jwt_token()
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    # Cas de test pour la d√©tection de produits
    test_cases = [
        {
            "name": "Boutique avec plusieurs produits",
            "input": {
                "texte": "J'ai une boutique de v√™tements pour enfants. Je vends des robes √† 25‚Ç¨, des chaussures √† 40‚Ç¨ et des sacs √† 15‚Ç¨.",
                "gps_mobile": "3.848033,11.502075"
            }
        },
        {
            "name": "Liste num√©rot√©e de produits",
            "input": {
                "texte": "Voici mes produits : 1. Robe d'√©t√© 2. Chaussures de sport 3. Sac √† main 4. Accessoires",
                "gps_mobile": "3.848033,11.502075"
            }
        },
        {
            "name": "Produits avec connecteurs",
            "input": {
                "texte": "Je propose des robes et aussi des chaussures, ainsi que des accessoires comme des sacs et des bijoux.",
                "gps_mobile": "3.848033,11.502075"
            }
        },
        {
            "name": "Quantit√©s multiples",
            "input": {
                "texte": "J'ai plusieurs robes, 5 paires de chaussures et diff√©rents accessoires disponibles.",
                "gps_mobile": "3.848033,11.502075"
            }
        },
        {
            "name": "Contexte commercial sans produits sp√©cifiques",
            "input": {
                "texte": "J'ai une boutique de v√™tements pour enfants √† Douala.",
                "gps_mobile": "3.848033,11.502075"
            }
        },
        {
            "name": "Un seul produit",
            "input": {
                "texte": "Je vends une robe d'√©t√©.",
                "gps_mobile": "3.848033,11.502075"
            }
        },
        {
            "name": "Produits avec prix",
            "input": {
                "texte": "robe √† 25‚Ç¨, chaussures 40‚Ç¨, sac co√ªte 15‚Ç¨, pantalon prix 30‚Ç¨",
                "gps_mobile": "3.848033,11.502075"
            }
        }
    ]
    
    print("üß™ Test de d√©tection de produits Yukpo")
    print("=" * 50)
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i}. {test_case['name']}")
        print(f"Input: {test_case['input']['texte']}")
        
        try:
            start_time = time.time()
            
            response = requests.post(
                f"{BACKEND_URL}/api/ia/orchestration",
                headers=headers,
                json=test_case['input'],
                timeout=30
            )
            
            end_time = time.time()
            duration = end_time - start_time
            
            if response.status_code == 200:
                result = response.json()
                
                # V√©rifier si le champ 'produits' est pr√©sent
                has_products_field = False
                if isinstance(result, dict):
                    # Chercher dans les champs de donn√©es
                    for field_name, field_data in result.items():
                        if isinstance(field_data, dict) and field_data.get('type_donnee') == 'listeproduit':
                            has_products_field = True
                            print(f"‚úÖ Champ 'produits' d√©tect√© dans '{field_name}'")
                            break
                
                if not has_products_field:
                    print("‚ùå Aucun champ 'produits' d√©tect√©")
                
                print(f"‚è±Ô∏è  Temps: {duration:.2f}s")
                print(f"üìä R√©ponse: {json.dumps(result, indent=2, ensure_ascii=False)}")
                
            else:
                print(f"‚ùå Erreur HTTP {response.status_code}: {response.text}")
                
        except requests.exceptions.Timeout:
            print("‚è∞ Timeout - L'IA prend trop de temps")
        except requests.exceptions.ConnectionError:
            print("üîå Erreur de connexion - V√©rifiez que le backend tourne sur le port 3001")
        except Exception as e:
            print(f"üí• Erreur: {e}")
        
        print("-" * 50)

def test_multimodal_product_detection():
    """Teste la d√©tection avec contexte multimodal"""
    
    token = generate_jwt_token()
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    print("\nüéØ Test de d√©tection multimodale")
    print("=" * 50)
    
    # Test avec contexte multimodal
    multimodal_input = {
        "texte": "J'ai une boutique de v√™tements",
        "gps_mobile": "3.848033,11.502075",
        "site_web": "https://ma-boutique.com",
        "base64_image": ["image1_base64", "image2_base64"],  # Plusieurs images
        "excel_base64": ["catalogue.xlsx"]  # Fichier Excel
    }
    
    print("Input multimodal avec plusieurs images et Excel:")
    print(f"- Texte: {multimodal_input['texte']}")
    print(f"- Images: {len(multimodal_input['base64_image'])}")
    print(f"- Excel: {len(multimodal_input['excel_base64'])}")
    print(f"- Site web: {multimodal_input['site_web']}")
    
    try:
        start_time = time.time()
        
        response = requests.post(
            f"{BACKEND_URL}/api/ia/orchestration",
            headers=headers,
            json=multimodal_input,
            timeout=30
        )
        
        end_time = time.time()
        duration = end_time - start_time
        
        if response.status_code == 200:
            result = response.json()
            
            # V√©rifier la d√©tection de produits
            has_products_field = False
            if isinstance(result, dict):
                for field_name, field_data in result.items():
                    if isinstance(field_data, dict) and field_data.get('type_donnee') == 'listeproduit':
                        has_products_field = True
                        print(f"‚úÖ Champ 'produits' d√©tect√© dans '{field_name}'")
                        break
            
            if not has_products_field:
                print("‚ùå Aucun champ 'produits' d√©tect√© malgr√© le contexte multimodal")
            
            print(f"‚è±Ô∏è  Temps: {duration:.2f}s")
            print(f"üìä R√©ponse: {json.dumps(result, indent=2, ensure_ascii=False)}")
            
        else:
            print(f"‚ùå Erreur HTTP {response.status_code}: {response.text}")
            
    except Exception as e:
        print(f"üí• Erreur: {e}")

if __name__ == "__main__":
    print("üöÄ Lancement des tests de d√©tection de produits...")
    
    # Test 1: D√©tection bas√©e sur le texte
    test_product_detection()
    
    # Test 2: D√©tection multimodale
    test_multimodal_product_detection()
    
    print("\n‚úÖ Tests termin√©s!") 