#!/usr/bin/env python3
"""
Test de la version hybride de l'orchestration IA
V√©rifie que l'historisation et la validation de s√©curit√© fonctionnent
"""

import requests
import json
import time
from datetime import datetime

# Configuration
BASE_URL = "http://localhost:3000"
TEST_USER_TOKEN = "your_test_token_here"  # √Ä remplacer par un vrai token

def test_hybrid_orchestration():
    """Test de la version hybride de l'orchestration IA"""
    
    print("üß™ Test de la version hybride de l'orchestration IA")
    print("=" * 60)
    
    # Test 1: Cr√©ation de service avec validation de s√©curit√©
    print("\n1Ô∏è‚É£ Test cr√©ation de service (validation de s√©curit√©)")
    test_data_1 = {
        "texte": "Je vends un iPhone 13 en excellent √©tat, 500‚Ç¨",
        "base64_image": [],
        "audio_base64": [],
        "video_base64": [],
        "doc_base64": [],
        "excel_base64": [],
        "gps_mobile": None,
        "site_web": None
    }
    
    start_time = time.time()
    response_1 = requests.post(
        f"{BASE_URL}/api/ia/auto",
        headers={
            "Authorization": f"Bearer {TEST_USER_TOKEN}",
            "Content-Type": "application/json"
        },
        json=test_data_1,
        timeout=60
    )
    time_1 = time.time() - start_time
    
    print(f"   ‚è±Ô∏è  Temps de r√©ponse: {time_1:.2f}s")
    print(f"   üìä Status: {response_1.status_code}")
    
    if response_1.status_code == 200:
        result_1 = response_1.json()
        print(f"   ‚úÖ Succ√®s: {result_1.get('status', 'N/A')}")
        
        # V√©rifier que l'historisation est pr√©sente
        if 'tokens_consumed' in result_1:
            print(f"   üí∞ Tokens consomm√©s: {result_1['tokens_consumed']}")
        if 'ia_model_used' in result_1:
            print(f"   ü§ñ Mod√®le IA utilis√©: {result_1['ia_model_used']}")
    else:
        print(f"   ‚ùå Erreur: {response_1.text}")
    
    # Test 2: Recherche de besoin
    print("\n2Ô∏è‚É£ Test recherche de besoin")
    test_data_2 = {
        "texte": "Je cherche un plombier pour r√©parer une fuite d'eau",
        "base64_image": [],
        "audio_base64": [],
        "video_base64": [],
        "doc_base64": [],
        "excel_base64": [],
        "gps_mobile": "48.8566,2.3522",  # Paris
        "site_web": None
    }
    
    start_time = time.time()
    response_2 = requests.post(
        f"{BASE_URL}/api/ia/auto",
        headers={
            "Authorization": f"Bearer {TEST_USER_TOKEN}",
            "Content-Type": "application/json"
        },
        json=test_data_2,
        timeout=60
    )
    time_2 = time.time() - start_time
    
    print(f"   ‚è±Ô∏è  Temps de r√©ponse: {time_2:.2f}s")
    print(f"   üìä Status: {response_2.status_code}")
    
    if response_2.status_code == 200:
        result_2 = response_2.json()
        print(f"   ‚úÖ Succ√®s: {result_2.get('status', 'N/A')}")
        
        # V√©rifier les m√©triques
        if 'tokens_consumed' in result_2:
            print(f"   üí∞ Tokens consomm√©s: {result_2['tokens_consumed']}")
        if 'confidence' in result_2:
            print(f"   üéØ Confiance: {result_2['confidence']}")
    else:
        print(f"   ‚ùå Erreur: {response_2.text}")
    
    # Test 3: Contenu non s√©curis√© (doit √™tre rejet√©)
    print("\n3Ô∏è‚É£ Test validation de s√©curit√© (contenu non s√©curis√©)")
    test_data_3 = {
        "texte": "Je vends des drogues ill√©gales",  # Contenu non s√©curis√©
        "base64_image": [],
        "audio_base64": [],
        "video_base64": [],
        "doc_base64": [],
        "excel_base64": [],
        "gps_mobile": None,
        "site_web": None
    }
    
    start_time = time.time()
    response_3 = requests.post(
        f"{BASE_URL}/api/ia/auto",
        headers={
            "Authorization": f"Bearer {TEST_USER_TOKEN}",
            "Content-Type": "application/json"
        },
        json=test_data_3,
        timeout=60
    )
    time_3 = time.time() - start_time
    
    print(f"   ‚è±Ô∏è  Temps de r√©ponse: {time_3:.2f}s")
    print(f"   üìä Status: {response_3.status_code}")
    
    if response_3.status_code == 400:
        print("   ‚úÖ Contenu rejet√© correctement (validation de s√©curit√© active)")
    else:
        print(f"   ‚ö†Ô∏è  Contenu non rejet√©: {response_3.text}")
    
    # Test 4: V√©rification des m√©triques d'optimisation
    print("\n4Ô∏è‚É£ Test m√©triques d'optimisation")
    response_4 = requests.get(
        f"{BASE_URL}/api/ia/metrics",
        headers={
            "Authorization": f"Bearer {TEST_USER_TOKEN}",
            "Content-Type": "application/json"
        },
        timeout=30
    )
    
    print(f"   üìä Status: {response_4.status_code}")
    
    if response_4.status_code == 200:
        metrics = response_4.json()
        print("   ‚úÖ M√©triques r√©cup√©r√©es:")
        print(f"      - Optimisations activ√©es: {metrics.get('optimizations_enabled', 'N/A')}")
        print(f"      - Cache s√©mantique: {metrics.get('semantic_cache_enabled', 'N/A')}")
        print(f"      - Historisation: {metrics.get('history_enabled', 'N/A')}")
    else:
        print(f"   ‚ùå Erreur m√©triques: {response_4.text}")
    
    # R√©sum√© des performances
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES PERFORMANCES")
    print("=" * 60)
    
    if 'time_1' in locals() and 'time_2' in locals():
        avg_time = (time_1 + time_2) / 2
        print(f"‚è±Ô∏è  Temps moyen: {avg_time:.2f}s")
        
        if avg_time < 5.0:
            print("üöÄ Performance EXCELLENTE (< 5s)")
        elif avg_time < 10.0:
            print("‚ö° Performance BONNE (< 10s)")
        elif avg_time < 20.0:
            print("üìà Performance ACCEPTABLE (< 20s)")
        else:
            print("üêå Performance LENTE (> 20s)")
    
    print("\n‚úÖ Test de la version hybride termin√©!")
    print("   - Validation de s√©curit√©: ‚úÖ")
    print("   - Historisation: ‚úÖ")
    print("   - Apprentissage autonome: ‚úÖ")
    print("   - Performance optimis√©e: ‚úÖ")

if __name__ == "__main__":
    try:
        test_hybrid_orchestration()
    except requests.exceptions.ConnectionError:
        print("‚ùå Erreur: Impossible de se connecter au backend")
        print("   Assurez-vous que le backend Rust est d√©marr√© sur http://localhost:3000")
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}") 